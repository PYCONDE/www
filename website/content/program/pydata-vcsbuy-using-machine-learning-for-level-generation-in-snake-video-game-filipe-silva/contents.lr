_model: session 
---
code: VCSBUY
---
title: Using machine learning for Level Generation in Snake (video-game)
---
description: Using machine learning models for level generation in video-games
---
short_description: Using machine learning models for level generation in video-games
---
twitter_image: /static/media/twitter/VCSBUY.jpg
---
speakers: Filipe Silva
---
submission_type: Tutorial
---
domains: Data Science, Machine Learning
---
biography: #### Filipe Silva

Affiliation: FREE NOW



Data Scientist at Mytaxi. Before I was working as a Machine Learning Engineer in a startup working in Computer Vision, Machine Learning and Fraud Detection. 
Master’s degree in Electrical and Computers Engineering with a focus in Automation.
I love cooking and music :)

visit the speaker at: [Twitter](https://twitter.com/Filipedls) • [Github](https://github.com/Filipedls)
---
affiliation: FREE NOW
---
track: PyData
---
python_skill: Python Skill Level basic
---
domain_expertise: Domain Expertise some
---
room: Saal 4
---
start_time: 13:45
---
day: friday
---
meta_title: Using machine learning for Level Generation in Snake (video-game) Filipe Silva PyConDE & PyDataBerlin 2019 conference 
---
meta_twitter_title: Using machine learning for Level Generation in Snake (video-game) @Filipedls #PyConDE #PyDataBerlin #PyData
---
categories: pydata, python-skill-level-basic, domain-expertise-some, tutorial, data-science, machine-learning, friday, friday-1345
---
slugified_slot_links: friday, friday-1345
---
video_link: https://www.youtube.com/embed/pBhHvXyFi7Y
---
youtube_id: pBhHvXyFi7Y
---
body: In some video-games, the level and environment generation uses random variables that are usually sampled from uniformed distributions. Or in some cases, these variables are even manually programmed.
The different game experiences, like levels of difficulty, are usually achieved by truncating these distributions to increase the chances of obtaining a sample that translates in a particular game experience, for example, a harder game. In simple games, this is done commonly by just increasing the speed of the game, without changing the way these variables are sampled. All of these variables have an impact on the way the game is going to develop for the player. 

Using Snake as an example, the goal of this tutorial is to instead of sampling the apple position from a uniform distribution, use a machine learning model trained on data from past games. By selecting different game situations to train our model we can archive different game experiences, such as different difficulty, game styles or even adapted to a player’s style.

Contents:
Part 1: Creating a game log
Part 2: Placing apples!
	0 - Opening the game log
		0.1 - Vizualizing some observations
	1 - Metrics to select the best apple placements
 		1.1 - Metric's Scores
	2 - Filtering Metric's Scores to create a training set
		2.1 - Generating more apples
	3 - Features
	4 - Tranning
		4.1 - Testing
	5 - Create a model with your apples!

Github: https://github.com/Filipedls/Snake_PyData

