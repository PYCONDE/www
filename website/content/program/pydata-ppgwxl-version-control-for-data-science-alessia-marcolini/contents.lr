_model: session 
---
code: PPGWXL
---
title: Version Control for Data Science
---
description: Versioning in Data Science projects can be pretty painful: are you able to track the data sets along with the code itself and some of the resulting models?
---
short_description: Versioning in Data Science projects can be pretty painful: are you able to track the data sets along with the code itself and some of the resulting models?
---
twitter_image: /static/media/twitter/PPGWXL.jpg
---
speakers: Alessia Marcolini
---
submission_type: Talk
---
domains: Artificial Intelligence, Data Science, Machine Learning
---
biography: #### Alessia Marcolini

Affiliation: Fondazione Bruno Kessler



Enthusiastic and curious ICT student at University of Trento, with a passion for deep learning. Junior Research Assistant at FBK, working on machine / deep learning solutions for environmental health and food quality. Pythonista, PyCon Italy organizer and Django Girls coach.

visit the speaker at: [Twitter](https://twitter.com/viperale) • [Github](https://github.com/alessiamarcolini)
---
affiliation: Fondazione Bruno Kessler
---
track: PyData
---
python_skill: Python Skill Level basic
---
domain_expertise: Domain Expertise some
---
room: Saal 6
---
start_time: 10:00
---
day: friday
---
meta_title: Version Control for Data Science Alessia Marcolini PyConDE & PyDataBerlin 2019 conference 
---
meta_twitter_title: Version Control for Data Science @viperale #PyConDE #PyDataBerlin #PyData
---
categories: pydata, python-skill-level-basic, domain-expertise-some, talk, artificial-intelligence, data-science, machine-learning, friday, friday-1000
---
slugified_slot_links: friday, friday-1000
---
video_link: https://www.youtube.com/embed/IH2gEtxIbqM
---
youtube_id: IH2gEtxIbqM
---
body: *Data* is the key differentiator between a Machine Learning project and a traditional software project: even if everything else stays stable, changing the data your models are trained upon makes a huge difference.

The best tools for tracking changes are the VCS that are used in software development, such as Git, Mercurial, and Subversion. They keep track of what was changed in a file, when and by whom, and synchronize changes to a central server so that multiple contributors can manage changes to the same set of files. But these **traditional tools aren’t quite sufficient for Machine Learning** because of the need for being able to **track the data sets along with the code itself and some of the resulting models**.

So versioning in Data Science projects can be pretty painful. There are generally six things that you usually want to keep track of:
* code
* data
* configurations
* resulting models
* performance metrics
* environments / dependencies

Running a Data Science project is an iterative process and you usually don’t want to commit changes every time you change one parameter or one performance metric. Instead, you'll run a variety of experiments and commit it once you’re satisfied.

This usually means that during the experimentation process, you might lose track of any of the experiments that you did (e.g. changes on data or dependencies). However, when you share your results with your colleagues, they'll not have any ideas of what you've already tried and most likely will end up redoing a bunch of work — heck, after a couple of weeks you could end up doing the same.

In this talk I will share some best practices to help you better version your ML project and also I will show some existing tools such as [DVC](https://dvc.org/), [ndim](https://github.com/jupyter/nbdime) and [ReviewNB](https://www.reviewnb.com/) (to version Jupyter Notebooks).

This talk is aimed at PyData beginners and specific Machine Learning expertise is not required, although knowledge about Git and the Data Science ecosystem would help follow the speech.

