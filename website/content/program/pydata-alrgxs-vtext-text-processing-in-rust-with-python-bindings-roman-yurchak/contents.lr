_model: session 
---
code: ALRGXS
---
title: vtext: text processing in Rust with Python bindings
---
description: vtext: text processing in Rust with Python bidings    #pyconde #pydataberlin
---
short_description: vtext: text processing in Rust with Python bidings    #pyconde #pydataberlin
---
twitter_image: /static/media/twitter/ALRGXS.jpg
---
speakers: Roman Yurchak
---
submission_type: Talk
---
domains: Natural Language Processing
---
biography: #### Roman Yurchak



Roman Yurchak has a background in computational physics, and is currently working
as an independent consultant for data science related projects. He is also a  scikit-learn core developer.

visit the speaker at: [Twitter](https://twitter.com/RomanYurchak) â€¢ [Github](https://github.com/rth)
---
affiliation: 
---
track: PyData
---
python_skill: Python Skill Level basic
---
domain_expertise: Domain Expertise some
---
room: Saal 10
---
start_time: 15:30
---
day: wednesday
---
meta_title: vtext: text processing in Rust with Python bindings Roman Yurchak PyConDE & PyDataBerlin 2019 conference 
---
meta_twitter_title: vtext: text processing in Rust with Python bindings @RomanYurchak #PyConDE #PyDataBerlin #PyData
---
categories: pydata, python-skill-level-basic, domain-expertise-some, talk, natural-language-processing, wednesday, wednesday-1530
---
slugified_slot_links: wednesday, wednesday-1530
---
video_link: https://www.youtube.com/embed/G_43eu6Ascs
---
youtube_id: G_43eu6Ascs
---
body: Scientific Python has historically relied on compiled extensions for performance critical parts of the code. In this talk, we outline how to write Rust extensions for Python using [rust-numpy](https://github.com/rust-numpy/rust-numpy),
project. Advantages and limitations of this approach as compared to Cython or wrapping Fortran, C or C++ are also discussed.

In the second part, we introduce the [vtext](https://github.com/rth/vtext) project that allows fast text processing in Python using Rust. In particular, we consider the problems of text tokenization, and (parallel) token counting resulting in a sparse vector representation of documents. These can then be used as input in machine learning or information retrieval applications. We outline the approach used in vtext and compare to existing solutions of these problems in the Python ecosystem.

