_model: session 
---
code: QXB8DR
---
title: Break your API gently - or not at all
---
description: How to change your API without annoying your users (too much).
---
short_description: How to change your API without annoying your users (too much).
---
twitter_image: /static/media/twitter/QXB8DR.jpg
---
speakers: Tim Hoffmann
---
submission_type: Talk
---
domains: APIs
---
biography: #### Tim Hoffmann

Affiliation: Carl Zeiss SMT GmbH



Tim Hoffmann has a passion for easy to use software. Both, in his professional life as a senior expert on optics simulation and systems engineering in the semiconductor industry as well a matplotlib core developer, he is striving to make things better - and has a lot of fun doing so using Python.
---
affiliation: Carl Zeiss SMT GmbH
---
track: PyConDE
---
python_skill: Python Skill Level basic
---
domain_expertise: Domain Expertise none
---
room: Saal 10
---
start_time: 11:50
---
day: thursday
---
meta_title: Break your API gently - or not at all Tim Hoffmann PyConDE & PyDataBerlin 2019 conference 
---
meta_twitter_title: Break your API gently - or not at all @ #PyConDE #PyDataBerlin #PyData
---
categories: pyconde, python-skill-level-basic, domain-expertise-none, talk, apis, thursday, thursday-1150
---
slugified_slot_links: thursday, thursday-1150
---
video_link: https://www.youtube.com/embed/qDILVhNTuBA
---
youtube_id: qDILVhNTuBA
---
body: This talk is for everybody who writes code that is used by others. As soon as somebody else uses your code, you've deliberately or not created an API. Even with the greatest care, there will always be things you wish to change later on. But since other people's code relies on your API, mistakes cannot be undone easily. Luckily, Python is quite flexible - allowing for various changes while keeping backward compatibility. But even when a breaking change is required there are ways to achieve this with the least possible pain for authors and users.

Suitable transition strategies depend on the reach of your code. Therefore, we'll look at various real-world examples from core python over public open source libraries to company-internal code. These examples will give you practical patterns you can apply in your code. Additionally, we'll see how code can be written in the first place so that later changes are easier.

